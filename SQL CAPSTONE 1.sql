--CASE1
------------------------------
--Create Database "Assignment" and use.
CREATE DATABASE ASSIGNMENT;
USE ASSIGNMENT;

--Create Customer Table.
CREATE TABLE CUSTOMER(
			 CUSTOMER_ID INT,
			 FIRST_NAME CHAR(10),
			 LAST_NAME CHAR(10),
			 EMAIL VARCHAR(30),
			 ADDRESS VARCHAR(20),
			 CITY CHAR(10),
			 STATE CHAR(15),
			 ZIP INT);


--Insert Records into Customer Table.
INSERT INTO CUSTOMER(CUSTOMER_ID,  FIRST_NAME, LAST_NAME, EMAIL, ADDRESS, CITY, STATE, ZIP)
VALUES (1, 'GEET', 'RAJ', 'GEETRAJ@GMAIL.COM', 'BHILLS - 29', 'SAN JOSE', 'CALIFORNIA', 412565);
INSERT INTO CUSTOMER VALUES
(2, 'JOHN', 'DEERE', 'JOHN11@GMAIL.COM', 'SEMINARY ROAD', 'SAN JOSE', 'CALIFORNIA', 562341);
INSERT INTO CUSTOMER VALUES
(3, 'ABRAM', 'KHAN', 'KHANABRAM@GMAIL.COM', 'MOSCOW HEIGHTS - 12', 'BANGALORE', 'KARNATAKA', 457264);
INSERT INTO CUSTOMER VALUES
(4, 'GAUTAM', 'SANJEEV', 'SANJUGAUTAM12@GMAIL.COM', 'FALCON HILLS - 35', 'PUNE', 'MAHARASHTRA', 444460);
INSERT INTO CUSTOMER VALUES
(5, 'GAIL', 'HARDY', 'GAIL39@GMAIL.COM', 'SKAGEN 29', 'MERIDA', 'MEXICO', 445691);

SELECT * FROM CUSTOMER;
------------------------

--1.4 SELECT ONLY THE FIRST_NAME & LAST_NAME COLUMNS FROM THE CUSTOMER TABLE

SELECT CONCAT(FIRST_NAME, '', LAST_NAME)AS NAME FROM CUSTOMER 

----------------------

--1.5 SELECT THOSE RECORDS WHERE FIRST_NAME STARTS WITH "G" AND CITY IS 'SAN JOSE'.
SELECT * FROM CUSTOMER
WHERE FIRST_NAME LIKE 'G%'
AND CITY = 'SAN JOSE';

-----------------------------
--CASE 2--

--Create an "Orders" Table.
CREATE TABLE ORDERS(
					ORDER_ID INT,
					ORDER_DATE DATE,
					AMOUNT INT,
					CUSTOMER_ID INT);


--Insert Records into "Orders" Table.
INSERT INTO ORDERS(ORDER_ID, ORDER_DATE, AMOUNT, CUSTOMER_ID)
VALUES (101, '01/01/2021', 5000, 2);
INSERT INTO ORDERS VALUES (102, '01/14/2021', 6500, 3);
INSERT INTO ORDERS VALUES (103, '01/27/2021', 2300, 4);
INSERT INTO ORDERS VALUES (104, '02/02/2021', 5040, 6);
INSERT INTO ORDERS VALUES (105, '02/07/2021', 1570, 8);
INSERT INTO ORDERS VALUES (106, '01/23/2021', 5000, 2);
INSERT INTO ORDERS VALUES (107, '01/11/2021', 600, 3);
INSERT INTO ORDERS VALUES (108, '02/02/2021', 2300, 4);
INSERT INTO ORDERS VALUES (109, '02/05/2021', 450, 4);
INSERT INTO ORDERS VALUES (110, '02/07/2021', 1530, 8);

SELECT * FROM ORDERS;

-------------------
--2.2  MAKE AN INNER JOIN ON 'CUSTOMER' & 'ORDERS' TABLES ON THE 'CUSTOMER_ID' COLUMN

SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, C.EMAIL, C.ADDRESS, C.CITY, C.STATE, C.ZIP,
		O.ORDER_ID, O.ORDER_DATE, O.AMOUNT, O.CUSTOMER_ID
FROM CUSTOMER C
INNER JOIN ORDERS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID;


--------------------------------
--2.3 MAKE LEFT AND RIGHT JOINS ON 'CUSTOMER' & 'ORDERS' TABLE ON THE 'CUSTOMER_ID' COLUMN

SELECT C.CUSTOMER_ID, FIRST_NAME, LAST_NAME, EMAIL, ADDRESS, CITY, STATE, ZIP, ORDER_ID, ORDER_DATE,
		AMOUNT, O.CUSTOMER_ID
FROM CUSTOMER C
LEFT JOIN ORDERS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID;

SELECT C.CUSTOMER_ID, FIRST_NAME, LAST_NAME, EMAIL, ADDRESS, CITY, STATE, ZIP, ORDER_ID, ORDER_DATE,
		AMOUNT, O.CUSTOMER_ID
FROM CUSTOMER C
RIGHT JOIN ORDERS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID;

--------------------------------------
--2.4 UPDATE 'ORDERS' TABLE, SET THE AMOUNT TO BE 100 WHERE 'CUSTOMER_ID' IS 3.
UPDATE ORDERS 
SET AMOUNT = 100
WHERE CUSTOMER_ID = 3;

SELECT * FROM ORDERS;

-----------------------------------
--CASE 3--

--3.1  USE THE INBUILT FUNCTIONS AND FIND THE MINIMUM, MAXIMUM AND AVERAGE AMOUNT FROM THE ORDERS TABLE

--MINIMUN
SELECT MIN(AMOUNT) AS 'MIN AMOUNT' FROM ORDERS;

--MAXIMUM
SELECT MAX(AMOUNT) AS 'MAX AMOUNT' FROM ORDERS;

--AVERAGE
SELECT AVG(AMOUNT) AS 'AVG AMOUNT' FROM ORDERS;

----------------------------
--3.2 CREATE A USER DEFINED FUNCTION "PROD", WHICH WILL MULTIPLY THE GIVEN NUMBER WITH 10.

GO
CREATE FUNCTION PROD (@a INT)
RETURNS INT
AS
BEGIN
DECLARE @RESULT INT = @a*10
RETURN @RESULT
END
GO

SELECT dbo.PROD (5) AS MULTIPLE;
SELECT dbo.PROD(1500) AS MULTIPLE;

----------------------------------------
--3.3 USE THE CASE STATEMENT TO CHECK IF 100 IS LESS THAN 200, GREATER THAN 200 OR EQUAL TO 200 AND PRINT
--THE CORRESPONDING VALUE.

SELECT
CASE
WHEN 100 < 200
THEN'100 IS LESS THAN 200'
WHEN 100 > 200
THEN '100 IS GREATER THAN 200'
WHEN 100 = 200
THEN '100 IS EQUALTO 200'
ELSE 'CHECK'
END;


-------------
----CASE 4-----

--4.1  ARRANGE THE 'ORDERS' DATASET IN DECREASING ORDER OF AMOUNT

SELECT * FROM ORDERS
ORDER BY AMOUNT DESC;

------------------
--4.2 
--Create a Table with name "Employee_Details1".
CREATE TABLE EMPLOYEE_DETAILS1 (
								EMP_ID INT,
								EMP_NAME CHAR(20),
								EMP_SAL INT);

--Insert Records into "Employee_Details1" Table.
INSERT INTO EMPLOYEE_DETAILS1(EMP_ID, EMP_NAME, EMP_SAL)
VALUES (101, 'JOSEPH TRIBBIANI', 25000);
INSERT INTO EMPLOYEE_DETAILS1 VALUES (102, 'MONICA GELLER', 30000);
INSERT INTO EMPLOYEE_DETAILS1 VALUES (103, 'CHANDLER BING', 50000);
INSERT INTO EMPLOYEE_DETAILS1 VALUES (104, 'GUNTHER', 15000);
INSERT INTO EMPLOYEE_DETAILS1 VALUES (105, 'RACHEL GREEN', 30000);

SELECT * FROM EMPLOYEE_DETAILS1; 

----------------------------------
--4.3
--Create a table with name "Employee_Details2".
CREATE TABLE EMPLOYEE_DETAILS2 (
								EMP_ID INT,
								EMP_NAME CHAR(20),
								EMP_SAL INT);

--Insert Records into "Employee_Details2".
INSERT INTO EMPLOYEE_DETAILS2(EMP_ID, EMP_NAME, EMP_SAL)
VALUES (101, 'JOSEPH TRIBBIANI', 25000);
INSERT INTO EMPLOYEE_DETAILS2 VALUES (102, 'PHOEBE BUFFAY', 30000);
INSERT INTO EMPLOYEE_DETAILS2 VALUES (103, 'CHANDLER BING', 50000);
INSERT INTO EMPLOYEE_DETAILS2 VALUES (104, 'ROSS GELLER', 70000);
INSERT INTO EMPLOYEE_DETAILS2 VALUES (105, 'RACHEL GREEN', 30000);

SELECT * FROM EMPLOYEE_DETAILS2;

----4.4 UNION OPERATOR-----

SELECT * FROM EMPLOYEE_DETAILS1
UNION
SELECT * FROM EMPLOYEE_DETAILS2;

-----4.5 INTERSECT OPERATOR-----

SELECT * FROM EMPLOYEE_DETAILS1
INTERSECT
SELECT * FROM EMPLOYEE_DETAILS2;


-----4.6 EXCEPT OPERATOR-----

SELECT * FROM EMPLOYEE_DETAILS1
EXCEPT
SELECT * FROM EMPLOYEE_DETAILS2;

SELECT * FROM EMPLOYEE_DETAILS2
EXCEPT
SELECT * FROM EMPLOYEE_DETAILS1;



------------------
--CASE5

--5.1  CREATE A VIEW NAMED 'CUSTOMER_SAN_JOSE' WHICH COMPRISES OF ONLY THOSE CUSTOMERS WHO ARE FROM
--- SAN JOSE.


CREATE VIEW CUSTOMER_SAN_JOSE
AS
SELECT * FROM CUSTOMER
WHERE CITY = 'SAN JOSE'
WITH CHECK OPTION;

SELECT * FROM CUSTOMER_SAN_JOSE;


---INSIDE A TRANSACTION, UPDATE THE FIRST NAME OF THE CUSTOMER TO FRANCIS, WHERE THE LAST NAME IS JORDAN.
       
	  BEGIN TRANSACTION
UPDATE CUSTOMER
SET FIRST_NAME = 'FRANCIS'
WHERE LAST_NAME = 'JORDAN';

SELECT * FROM CUSTOMER;
  
  
  ----ROLLBACK THE TRANSACTION.
   ROLLBACK;
 
 
 ----SET THE FIRST NAME OF CUSTOMER TO ALEX, WHERE THE LAST NAME IS JORDAN.
UPDATE CUSTOMER
SET FIRST_NAME = 'ALEX'
WHERE LAST_NAME = 'JORDAN';

SELECT * FROM CUSTOMER;


-------------------------------
DROP TABLE CUSTOMER;
DROP TABLE ORDERS;
DROP FUNCTION PROD;
DROP TABLE EMPLOYEE_DETAILS1;
DROP TABLE EMPLOYEE_DETAILS2;
DROP VIEW CUSTOMER_SAN_JOSE;

















